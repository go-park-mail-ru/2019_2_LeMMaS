// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auth.proto

package auth

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Error struct {
	Error                string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{0}
}

func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type SessionID struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *SessionID) Reset()         { *m = SessionID{} }
func (m *SessionID) String() string { return proto.CompactTextString(m) }
func (*SessionID) ProtoMessage()    {}
func (*SessionID) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{1}
}

func (m *SessionID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionID.Unmarshal(m, b)
}
func (m *SessionID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionID.Marshal(b, m, deterministic)
}
func (m *SessionID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionID.Merge(m, src)
}
func (m *SessionID) XXX_Size() int {
	return xxx_messageInfo_SessionID.Size(m)
}
func (m *SessionID) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionID.DiscardUnknown(m)
}

var xxx_messageInfo_SessionID proto.InternalMessageInfo

func (m *SessionID) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type Session struct {
	Login                string   `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	Useragent            string   `protobuf:"bytes,2,opt,name=useragent,proto3" json:"useragent,omitempty"`
}

func (m *Session) Reset()         { *m = Session{} }
func (m *Session) String() string { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()    {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{2}
}

func (m *Session) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Session.Unmarshal(m, b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Session.Marshal(b, m, deterministic)
}
func (m *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(m, src)
}
func (m *Session) XXX_Size() int {
	return xxx_messageInfo_Session.Size(m)
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *Session) GetUseragent() string {
	if m != nil {
		return m.Useragent
	}
	return ""
}

type UserAuth struct {
	Email                string   `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *UserAuth) Reset()         { *m = UserAuth{} }
func (m *UserAuth) String() string { return proto.CompactTextString(m) }
func (*UserAuth) ProtoMessage()    {}
func (*UserAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{3}
}

func (m *UserAuth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserAuth.Unmarshal(m, b)
}
func (m *UserAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserAuth.Marshal(b, m, deterministic)
}
func (m *UserAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAuth.Merge(m, src)
}
func (m *UserAuth) XXX_Size() int {
	return xxx_messageInfo_UserAuth.Size(m)
}
func (m *UserAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAuth.DiscardUnknown(m)
}

var xxx_messageInfo_UserAuth proto.InternalMessageInfo

func (m *UserAuth) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserAuth) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type SessionIDAndError struct {
	SessionID            *SessionID `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Error                *Error     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *SessionIDAndError) Reset()         { *m = SessionIDAndError{} }
func (m *SessionIDAndError) String() string { return proto.CompactTextString(m) }
func (*SessionIDAndError) ProtoMessage()    {}
func (*SessionIDAndError) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{4}
}

func (m *SessionIDAndError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionIDAndError.Unmarshal(m, b)
}
func (m *SessionIDAndError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionIDAndError.Marshal(b, m, deterministic)
}
func (m *SessionIDAndError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionIDAndError.Merge(m, src)
}
func (m *SessionIDAndError) XXX_Size() int {
	return xxx_messageInfo_SessionIDAndError.Size(m)
}
func (m *SessionIDAndError) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionIDAndError.DiscardUnknown(m)
}

var xxx_messageInfo_SessionIDAndError proto.InternalMessageInfo

func (m *SessionIDAndError) GetSessionID() *SessionID {
	if m != nil {
		return m.SessionID
	}
	return nil
}

func (m *SessionIDAndError) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type UserDataRegister struct {
	Email                string   `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *UserDataRegister) Reset()         { *m = UserDataRegister{} }
func (m *UserDataRegister) String() string { return proto.CompactTextString(m) }
func (*UserDataRegister) ProtoMessage()    {}
func (*UserDataRegister) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{5}
}

func (m *UserDataRegister) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserDataRegister.Unmarshal(m, b)
}
func (m *UserDataRegister) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserDataRegister.Marshal(b, m, deterministic)
}
func (m *UserDataRegister) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDataRegister.Merge(m, src)
}
func (m *UserDataRegister) XXX_Size() int {
	return xxx_messageInfo_UserDataRegister.Size(m)
}
func (m *UserDataRegister) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDataRegister.DiscardUnknown(m)
}

var xxx_messageInfo_UserDataRegister proto.InternalMessageInfo

func (m *UserDataRegister) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserDataRegister) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UserDataRegister) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Error)(nil), "auth.Error")
	proto.RegisterType((*SessionID)(nil), "auth.SessionID")
	proto.RegisterType((*Session)(nil), "auth.Session")
	proto.RegisterType((*UserAuth)(nil), "auth.UserAuth")
	proto.RegisterType((*SessionIDAndError)(nil), "auth.SessionIDAndError")
	proto.RegisterType((*UserDataRegister)(nil), "auth.UserDataRegister")
}

func init() { proto.RegisterFile("auth.proto", fileDescriptor_8bbd6f3875b0e874) }

var fileDescriptor_8bbd6f3875b0e874 = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcf, 0x4e, 0xc2, 0x40,
	0x10, 0xc6, 0xa1, 0x02, 0xd2, 0x01, 0x51, 0x27, 0x46, 0x09, 0x6a, 0xa2, 0x7b, 0xe2, 0x22, 0x31,
	0x18, 0x6f, 0x7a, 0x20, 0xd6, 0x43, 0x13, 0x4e, 0x35, 0x26, 0x5e, 0x57, 0xd9, 0xb4, 0x8d, 0xd0,
	0x25, 0xbb, 0xdb, 0xf8, 0x94, 0xbe, 0x93, 0xd9, 0x69, 0xb7, 0xc5, 0x7a, 0xf2, 0x36, 0x7f, 0xbe,
	0xd9, 0xf9, 0x7e, 0xd3, 0x02, 0xf0, 0xdc, 0x24, 0xb3, 0xad, 0x92, 0x46, 0x62, 0xc7, 0xc6, 0xec,
	0x12, 0xba, 0xcf, 0x4a, 0x49, 0x85, 0x27, 0xd0, 0x15, 0x36, 0x18, 0xb7, 0xaf, 0xda, 0x53, 0x3f,
	0x2a, 0x12, 0x76, 0x0e, 0xfe, 0x8b, 0xd0, 0x3a, 0x95, 0x59, 0x18, 0xe0, 0x08, 0xbc, 0x30, 0x28,
	0xfb, 0x5e, 0x18, 0xb0, 0x47, 0xd8, 0x2f, 0x9b, 0x76, 0x7a, 0x2d, 0xe3, 0x34, 0x73, 0xd3, 0x94,
	0xe0, 0x05, 0xf8, 0xb9, 0x16, 0x8a, 0xc7, 0x22, 0x33, 0x63, 0x8f, 0x3a, 0x75, 0x81, 0x3d, 0x40,
	0xff, 0x55, 0x0b, 0xb5, 0xc8, 0x4d, 0x42, 0xdb, 0x37, 0x3c, 0x5d, 0x57, 0xdb, 0x6d, 0x82, 0x13,
	0xe8, 0x6f, 0xb9, 0xd6, 0x5f, 0x52, 0xad, 0xca, 0xf1, 0x2a, 0x67, 0x02, 0x8e, 0x2b, 0x67, 0x8b,
	0x6c, 0x55, 0x40, 0xdc, 0x80, 0xaf, 0x5d, 0x91, 0x9e, 0x1a, 0xcc, 0x0f, 0x67, 0xc4, 0x5c, 0x69,
	0xa3, 0x5a, 0x81, 0xd7, 0x8e, 0xd9, 0x23, 0xe9, 0xa0, 0x90, 0xd2, 0x53, 0xee, 0x00, 0x6f, 0x70,
	0x64, 0x4d, 0x06, 0xdc, 0xf0, 0x48, 0xc4, 0xa9, 0x36, 0x42, 0xfd, 0xdf, 0x2c, 0x22, 0x74, 0x32,
	0xbe, 0x11, 0xe3, 0x3d, 0xaa, 0x53, 0x3c, 0xff, 0x6e, 0x43, 0x87, 0xd8, 0xe7, 0xd0, 0x5d, 0xd2,
	0xb9, 0x46, 0xc5, 0x7e, 0x77, 0x94, 0xc9, 0x59, 0xc3, 0xba, 0xc3, 0x64, 0x2d, 0x9c, 0x42, 0x6f,
	0x29, 0x63, 0x99, 0x1b, 0x6c, 0xf2, 0x4d, 0x76, 0x29, 0x58, 0x0b, 0x6f, 0x61, 0xf8, 0x94, 0x88,
	0x8f, 0x4f, 0xf7, 0xa5, 0xfe, 0xe8, 0x0f, 0x7e, 0x15, 0x58, 0x0b, 0xef, 0x61, 0xe8, 0x50, 0xad,
	0x15, 0x3c, 0xad, 0x6d, 0xed, 0x9e, 0xa1, 0xb1, 0xe8, 0xbd, 0x47, 0xbf, 0xd5, 0xdd, 0x4f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xb2, 0x75, 0x2f, 0x19, 0x64, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthClient interface {
	Login(ctx context.Context, in *UserAuth, opts ...grpc.CallOption) (*SessionIDAndError, error)
	Logout(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*Error, error)
	CheckSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*Session, error)
	RegisterUser(ctx context.Context, in *UserDataRegister, opts ...grpc.CallOption) (*Error, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Login(ctx context.Context, in *UserAuth, opts ...grpc.CallOption) (*SessionIDAndError, error) {
	out := new(SessionIDAndError)
	err := c.cc.Invoke(ctx, "/auth.Auth/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Logout(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/auth.Auth/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CheckSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/auth.Auth/CheckSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) RegisterUser(ctx context.Context, in *UserDataRegister, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/auth.Auth/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
type AuthServer interface {
	Login(context.Context, *UserAuth) (*SessionIDAndError, error)
	Logout(context.Context, *SessionID) (*Error, error)
	CheckSession(context.Context, *SessionID) (*Session, error)
	RegisterUser(context.Context, *UserDataRegister) (*Error, error)
}

// UnimplementedAuthServer can be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (*UnimplementedAuthServer) Login(ctx context.Context, req *UserAuth) (*SessionIDAndError, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedAuthServer) Logout(ctx context.Context, req *SessionID) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (*UnimplementedAuthServer) CheckSession(ctx context.Context, req *SessionID) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSession not implemented")
}
func (*UnimplementedAuthServer) RegisterUser(ctx context.Context, req *UserDataRegister) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Login(ctx, req.(*UserAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Logout(ctx, req.(*SessionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CheckSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CheckSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/CheckSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CheckSession(ctx, req.(*SessionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDataRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RegisterUser(ctx, req.(*UserDataRegister))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Auth_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Auth_Logout_Handler,
		},
		{
			MethodName: "CheckSession",
			Handler:    _Auth_CheckSession_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _Auth_RegisterUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
