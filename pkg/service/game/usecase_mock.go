// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package game is a generated GoMock package.
package game

import (
	model "github.com/go-park-mail-ru/2019_2_LeMMaS/pkg/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUsecase is a mock of Usecase interface
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// StartGame mocks base method
func (m *MockUsecase) StartGame(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartGame", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartGame indicates an expected call of StartGame
func (mr *MockUsecaseMockRecorder) StartGame(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartGame", reflect.TypeOf((*MockUsecase)(nil).StartGame), userID)
}

// StopGame mocks base method
func (m *MockUsecase) StopGame(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopGame", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopGame indicates an expected call of StopGame
func (mr *MockUsecaseMockRecorder) StopGame(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopGame", reflect.TypeOf((*MockUsecase)(nil).StopGame), userID)
}

// SetDirection mocks base method
func (m *MockUsecase) SetDirection(userID, direction int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDirection", userID, direction)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDirection indicates an expected call of SetDirection
func (mr *MockUsecaseMockRecorder) SetDirection(userID, direction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDirection", reflect.TypeOf((*MockUsecase)(nil).SetDirection), userID, direction)
}

// SetSpeed mocks base method
func (m *MockUsecase) SetSpeed(userID, speed int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSpeed", userID, speed)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSpeed indicates an expected call of SetSpeed
func (mr *MockUsecaseMockRecorder) SetSpeed(userID, speed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSpeed", reflect.TypeOf((*MockUsecase)(nil).SetSpeed), userID, speed)
}

// GetPlayer mocks base method
func (m *MockUsecase) GetPlayer(userID int) *model.Player {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayer", userID)
	ret0, _ := ret[0].(*model.Player)
	return ret0
}

// GetPlayer indicates an expected call of GetPlayer
func (mr *MockUsecaseMockRecorder) GetPlayer(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayer", reflect.TypeOf((*MockUsecase)(nil).GetPlayer), userID)
}

// GetPlayers mocks base method
func (m *MockUsecase) GetPlayers(userID int) []*model.Player {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayers", userID)
	ret0, _ := ret[0].([]*model.Player)
	return ret0
}

// GetPlayers indicates an expected call of GetPlayers
func (mr *MockUsecaseMockRecorder) GetPlayers(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayers", reflect.TypeOf((*MockUsecase)(nil).GetPlayers), userID)
}

// GetFood mocks base method
func (m *MockUsecase) GetFood(userID int) []model.Food {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFood", userID)
	ret0, _ := ret[0].([]model.Food)
	return ret0
}

// GetFood indicates an expected call of GetFood
func (mr *MockUsecaseMockRecorder) GetFood(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFood", reflect.TypeOf((*MockUsecase)(nil).GetFood), userID)
}

// ListenEvents mocks base method
func (m *MockUsecase) ListenEvents(userID int) (chan map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenEvents", userID)
	ret0, _ := ret[0].(chan map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListenEvents indicates an expected call of ListenEvents
func (mr *MockUsecaseMockRecorder) ListenEvents(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenEvents", reflect.TypeOf((*MockUsecase)(nil).ListenEvents), userID)
}

// StopListenEvents mocks base method
func (m *MockUsecase) StopListenEvents(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopListenEvents", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopListenEvents indicates an expected call of StopListenEvents
func (mr *MockUsecaseMockRecorder) StopListenEvents(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopListenEvents", reflect.TypeOf((*MockUsecase)(nil).StopListenEvents), userID)
}
