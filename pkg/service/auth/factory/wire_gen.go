// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package factory

import (
	"github.com/go-park-mail-ru/2019_2_LeMMaS/pkg/logger"
	"github.com/go-park-mail-ru/2019_2_LeMMaS/pkg/service/auth/delivery/grpc"
	"github.com/go-park-mail-ru/2019_2_LeMMaS/pkg/service/auth/repository"
	"github.com/go-park-mail-ru/2019_2_LeMMaS/pkg/service/auth/server"
	"github.com/gomodule/redigo/redis"
	"os"
)

// Injectors from wire.go:

func NewAuthHandler() (*grpc.AuthHandler, error) {
	userRepository := repository.NewUserRepository()
	conn, err := newRedis()
	if err != nil {
		return nil, err
	}
	logger, err := NewLogger()
	if err != nil {
		return nil, err
	}
	sessionRepository := repository.NewSessionRepository(conn, logger)
	authServer := server.NewAuthServer(userRepository, sessionRepository)
	authHandler := grpc.NewAuthHandler(authServer)
	return authHandler, nil
}

// wire.go:

func NewLogger() (logger.Logger, error) {
	return logger.NewSentryLogger()
}

func newRedis() (redis.Conn, error) {
	connection, err := redis.DialURL(os.Getenv("REDIS_DSN"))
	if err != nil {
		return nil, err
	}
	_, err = connection.Do("PING")
	if err != nil {
		return nil, err
	}
	return connection, nil
}
