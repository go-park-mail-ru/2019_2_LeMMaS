// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package factory

import (
	"github.com/go-park-mail-ru/2019_2_LeMMaS/pkg/logger"
	"github.com/go-park-mail-ru/2019_2_LeMMaS/pkg/service/auth/delivery/grpc"
	"github.com/go-park-mail-ru/2019_2_LeMMaS/pkg/service/auth/repository"
	"github.com/go-park-mail-ru/2019_2_LeMMaS/pkg/service/auth/usecase"
	"github.com/go-park-mail-ru/2019_2_LeMMaS/pkg/service/user"
	"github.com/gomodule/redigo/redis"
	grpc2 "google.golang.org/grpc"
	"os"
)

// Injectors from wire.go:

func NewAuthHandler() (*grpc.AuthHandler, error) {
	userClient, err := newUserClient()
	if err != nil {
		return nil, err
	}
	logger, err := NewLogger()
	if err != nil {
		return nil, err
	}
	userRepository := repository.NewUserRepository(userClient, logger)
	conn, err := newRedis()
	if err != nil {
		return nil, err
	}
	sessionRepository := repository.NewSessionRepository(conn, logger)
	authUsecase := usecase.NewAuthUsecase(userRepository, sessionRepository, logger)
	authHandler := grpc.NewAuthHandler(authUsecase)
	return authHandler, nil
}

// wire.go:

func NewLogger() (logger.Logger, error) {
	sentry, err := logger.NewSentryLogger()
	if err != nil {
		return nil, err
	}
	return logger.NewCombinedLogger(sentry, logger.NewStdoutLogger()), nil
}

func newRedis() (redis.Conn, error) {
	connection, err := redis.DialURL(os.Getenv("REDIS_DSN"))
	if err != nil {
		return nil, err
	}
	_, err = connection.Do("PING")
	if err != nil {
		return nil, err
	}
	return connection, nil
}

func newUserClient() (user.UserClient, error) {
	conn, err := newGRPC("user:" + os.Getenv("PORT"))
	return user.NewUserClient(conn), err
}

func newGRPC(url string) (*grpc2.ClientConn, error) {
	conn, err := grpc2.Dial(url, grpc2.WithInsecure())
	if err != nil {
		return nil, err
	}
	return conn, nil
}
