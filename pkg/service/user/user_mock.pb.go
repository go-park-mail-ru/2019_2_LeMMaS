// Code generated by MockGen. DO NOT EDIT.
// Source: user.pb.go

// Package user is a generated GoMock package.
package user

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockUserClient is a mock of UserClient interface
type MockUserClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserClientMockRecorder
}

// MockUserClientMockRecorder is the mock recorder for MockUserClient
type MockUserClientMockRecorder struct {
	mock *MockUserClient
}

// NewMockUserClient creates a new mock instance
func NewMockUserClient(ctrl *gomock.Controller) *MockUserClient {
	mock := &MockUserClient{ctrl: ctrl}
	mock.recorder = &MockUserClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserClient) EXPECT() *MockUserClientMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUserClient) Create(ctx context.Context, in *CreateParams, opts ...grpc.CallOption) (*CreateResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*CreateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUserClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserClient)(nil).Create), varargs...)
}

// GetAll mocks base method
func (m *MockUserClient) GetAll(ctx context.Context, in *GetAllParams, opts ...grpc.CallOption) (*GetAllResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAll", varargs...)
	ret0, _ := ret[0].(*GetAllResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockUserClientMockRecorder) GetAll(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserClient)(nil).GetAll), varargs...)
}

// GetByID mocks base method
func (m *MockUserClient) GetByID(ctx context.Context, in *GetByIDParams, opts ...grpc.CallOption) (*GetByIDResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByID", varargs...)
	ret0, _ := ret[0].(*GetByIDResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockUserClientMockRecorder) GetByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserClient)(nil).GetByID), varargs...)
}

// GetByEmail mocks base method
func (m *MockUserClient) GetByEmail(ctx context.Context, in *GetByEmailParams, opts ...grpc.CallOption) (*GetByEmailResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByEmail", varargs...)
	ret0, _ := ret[0].(*GetByEmailResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail
func (mr *MockUserClientMockRecorder) GetByEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserClient)(nil).GetByEmail), varargs...)
}

// Update mocks base method
func (m *MockUserClient) Update(ctx context.Context, in *UpdateParams, opts ...grpc.CallOption) (*UpdateResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*UpdateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockUserClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserClient)(nil).Update), varargs...)
}

// UpdateAvatar mocks base method
func (m *MockUserClient) UpdateAvatar(ctx context.Context, in *UpdateAvatarParams, opts ...grpc.CallOption) (*UpdateAvatarResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAvatar", varargs...)
	ret0, _ := ret[0].(*UpdateAvatarResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAvatar indicates an expected call of UpdateAvatar
func (mr *MockUserClientMockRecorder) UpdateAvatar(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvatar", reflect.TypeOf((*MockUserClient)(nil).UpdateAvatar), varargs...)
}

// GetSpecialAvatar mocks base method
func (m *MockUserClient) GetSpecialAvatar(ctx context.Context, in *GetSpecialAvatarParams, opts ...grpc.CallOption) (*GetSpecialAvatarResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSpecialAvatar", varargs...)
	ret0, _ := ret[0].(*GetSpecialAvatarResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecialAvatar indicates an expected call of GetSpecialAvatar
func (mr *MockUserClientMockRecorder) GetSpecialAvatar(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecialAvatar", reflect.TypeOf((*MockUserClient)(nil).GetSpecialAvatar), varargs...)
}

// MockUserServer is a mock of UserServer interface
type MockUserServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServerMockRecorder
}

// MockUserServerMockRecorder is the mock recorder for MockUserServer
type MockUserServerMockRecorder struct {
	mock *MockUserServer
}

// NewMockUserServer creates a new mock instance
func NewMockUserServer(ctrl *gomock.Controller) *MockUserServer {
	mock := &MockUserServer{ctrl: ctrl}
	mock.recorder = &MockUserServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserServer) EXPECT() *MockUserServerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUserServer) Create(arg0 context.Context, arg1 *CreateParams) (*CreateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*CreateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUserServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserServer)(nil).Create), arg0, arg1)
}

// GetAll mocks base method
func (m *MockUserServer) GetAll(arg0 context.Context, arg1 *GetAllParams) (*GetAllResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].(*GetAllResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockUserServerMockRecorder) GetAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserServer)(nil).GetAll), arg0, arg1)
}

// GetByID mocks base method
func (m *MockUserServer) GetByID(arg0 context.Context, arg1 *GetByIDParams) (*GetByIDResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*GetByIDResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockUserServerMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserServer)(nil).GetByID), arg0, arg1)
}

// GetByEmail mocks base method
func (m *MockUserServer) GetByEmail(arg0 context.Context, arg1 *GetByEmailParams) (*GetByEmailResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", arg0, arg1)
	ret0, _ := ret[0].(*GetByEmailResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail
func (mr *MockUserServerMockRecorder) GetByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserServer)(nil).GetByEmail), arg0, arg1)
}

// Update mocks base method
func (m *MockUserServer) Update(arg0 context.Context, arg1 *UpdateParams) (*UpdateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*UpdateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockUserServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserServer)(nil).Update), arg0, arg1)
}

// UpdateAvatar mocks base method
func (m *MockUserServer) UpdateAvatar(arg0 context.Context, arg1 *UpdateAvatarParams) (*UpdateAvatarResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvatar", arg0, arg1)
	ret0, _ := ret[0].(*UpdateAvatarResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAvatar indicates an expected call of UpdateAvatar
func (mr *MockUserServerMockRecorder) UpdateAvatar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvatar", reflect.TypeOf((*MockUserServer)(nil).UpdateAvatar), arg0, arg1)
}

// GetSpecialAvatar mocks base method
func (m *MockUserServer) GetSpecialAvatar(arg0 context.Context, arg1 *GetSpecialAvatarParams) (*GetSpecialAvatarResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecialAvatar", arg0, arg1)
	ret0, _ := ret[0].(*GetSpecialAvatarResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecialAvatar indicates an expected call of GetSpecialAvatar
func (mr *MockUserServerMockRecorder) GetSpecialAvatar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecialAvatar", reflect.TypeOf((*MockUserServer)(nil).GetSpecialAvatar), arg0, arg1)
}
