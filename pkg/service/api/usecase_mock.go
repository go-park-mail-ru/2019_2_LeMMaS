// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package api is a generated GoMock package.
package api

import (
	model "github.com/go-park-mail-ru/2019_2_LeMMaS/pkg/model"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockAuthUsecase is a mock of AuthUsecase interface
type MockAuthUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUsecaseMockRecorder
}

// MockAuthUsecaseMockRecorder is the mock recorder for MockAuthUsecase
type MockAuthUsecaseMockRecorder struct {
	mock *MockAuthUsecase
}

// NewMockAuthUsecase creates a new mock instance
func NewMockAuthUsecase(ctrl *gomock.Controller) *MockAuthUsecase {
	mock := &MockAuthUsecase{ctrl: ctrl}
	mock.recorder = &MockAuthUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthUsecase) EXPECT() *MockAuthUsecaseMockRecorder {
	return m.recorder
}

// Login mocks base method
func (m *MockAuthUsecase) Login(email, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockAuthUsecaseMockRecorder) Login(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthUsecase)(nil).Login), email, password)
}

// Logout mocks base method
func (m *MockAuthUsecase) Logout(session string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout
func (mr *MockAuthUsecaseMockRecorder) Logout(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthUsecase)(nil).Logout), session)
}

// Register mocks base method
func (m *MockAuthUsecase) Register(email, password, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", email, password, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockAuthUsecaseMockRecorder) Register(email, password, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthUsecase)(nil).Register), email, password, name)
}

// GetUserID mocks base method
func (m *MockAuthUsecase) GetUserID(session string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", session)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID
func (mr *MockAuthUsecaseMockRecorder) GetUserID(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockAuthUsecase)(nil).GetUserID), session)
}

// GetPasswordHash mocks base method
func (m *MockAuthUsecase) GetPasswordHash(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordHash", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordHash indicates an expected call of GetPasswordHash
func (mr *MockAuthUsecaseMockRecorder) GetPasswordHash(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordHash", reflect.TypeOf((*MockAuthUsecase)(nil).GetPasswordHash), password)
}

// MockUserUsecase is a mock of UserUsecase interface
type MockUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseMockRecorder
}

// MockUserUsecaseMockRecorder is the mock recorder for MockUserUsecase
type MockUserUsecaseMockRecorder struct {
	mock *MockUserUsecase
}

// NewMockUserUsecase creates a new mock instance
func NewMockUserUsecase(ctrl *gomock.Controller) *MockUserUsecase {
	mock := &MockUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserUsecase) EXPECT() *MockUserUsecaseMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockUserUsecase) GetAll() ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockUserUsecaseMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserUsecase)(nil).GetAll))
}

// GetByID mocks base method
func (m *MockUserUsecase) GetByID(id int) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockUserUsecaseMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserUsecase)(nil).GetByID), id)
}

// Update mocks base method
func (m *MockUserUsecase) Update(id int, passwordHash, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, passwordHash, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUserUsecaseMockRecorder) Update(id, passwordHash, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserUsecase)(nil).Update), id, passwordHash, name)
}

// UpdateAvatar mocks base method
func (m *MockUserUsecase) UpdateAvatar(id int, avatar io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvatar", id, avatar)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAvatar indicates an expected call of UpdateAvatar
func (mr *MockUserUsecaseMockRecorder) UpdateAvatar(id, avatar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvatar", reflect.TypeOf((*MockUserUsecase)(nil).UpdateAvatar), id, avatar)
}

// GetSpecialAvatar mocks base method
func (m *MockUserUsecase) GetSpecialAvatar(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecialAvatar", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecialAvatar indicates an expected call of GetSpecialAvatar
func (mr *MockUserUsecaseMockRecorder) GetSpecialAvatar(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecialAvatar", reflect.TypeOf((*MockUserUsecase)(nil).GetSpecialAvatar), name)
}

// MockCsrfUsecase is a mock of CsrfUsecase interface
type MockCsrfUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCsrfUsecaseMockRecorder
}

// MockCsrfUsecaseMockRecorder is the mock recorder for MockCsrfUsecase
type MockCsrfUsecaseMockRecorder struct {
	mock *MockCsrfUsecase
}

// NewMockCsrfUsecase creates a new mock instance
func NewMockCsrfUsecase(ctrl *gomock.Controller) *MockCsrfUsecase {
	mock := &MockCsrfUsecase{ctrl: ctrl}
	mock.recorder = &MockCsrfUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCsrfUsecase) EXPECT() *MockCsrfUsecaseMockRecorder {
	return m.recorder
}

// CreateTokenBySession mocks base method
func (m *MockCsrfUsecase) CreateTokenBySession(session string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTokenBySession", session)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTokenBySession indicates an expected call of CreateTokenBySession
func (mr *MockCsrfUsecaseMockRecorder) CreateTokenBySession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTokenBySession", reflect.TypeOf((*MockCsrfUsecase)(nil).CreateTokenBySession), session)
}

// CheckTokenBySession mocks base method
func (m *MockCsrfUsecase) CheckTokenBySession(token, session string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTokenBySession", token, session)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTokenBySession indicates an expected call of CheckTokenBySession
func (mr *MockCsrfUsecaseMockRecorder) CheckTokenBySession(token, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTokenBySession", reflect.TypeOf((*MockCsrfUsecase)(nil).CheckTokenBySession), token, session)
}

// MockGameUsecase is a mock of GameUsecase interface
type MockGameUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockGameUsecaseMockRecorder
}

// MockGameUsecaseMockRecorder is the mock recorder for MockGameUsecase
type MockGameUsecaseMockRecorder struct {
	mock *MockGameUsecase
}

// NewMockGameUsecase creates a new mock instance
func NewMockGameUsecase(ctrl *gomock.Controller) *MockGameUsecase {
	mock := &MockGameUsecase{ctrl: ctrl}
	mock.recorder = &MockGameUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGameUsecase) EXPECT() *MockGameUsecaseMockRecorder {
	return m.recorder
}

// StartGame mocks base method
func (m *MockGameUsecase) StartGame(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartGame", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartGame indicates an expected call of StartGame
func (mr *MockGameUsecaseMockRecorder) StartGame(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartGame", reflect.TypeOf((*MockGameUsecase)(nil).StartGame), userID)
}

// StopGame mocks base method
func (m *MockGameUsecase) StopGame(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopGame", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopGame indicates an expected call of StopGame
func (mr *MockGameUsecaseMockRecorder) StopGame(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopGame", reflect.TypeOf((*MockGameUsecase)(nil).StopGame), userID)
}

// SetDirection mocks base method
func (m *MockGameUsecase) SetDirection(userID, direction int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDirection", userID, direction)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDirection indicates an expected call of SetDirection
func (mr *MockGameUsecaseMockRecorder) SetDirection(userID, direction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDirection", reflect.TypeOf((*MockGameUsecase)(nil).SetDirection), userID, direction)
}

// SetSpeed mocks base method
func (m *MockGameUsecase) SetSpeed(userID, speed int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSpeed", userID, speed)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSpeed indicates an expected call of SetSpeed
func (mr *MockGameUsecaseMockRecorder) SetSpeed(userID, speed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSpeed", reflect.TypeOf((*MockGameUsecase)(nil).SetSpeed), userID, speed)
}

// GetPlayer mocks base method
func (m *MockGameUsecase) GetPlayer(userID int) (*model.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayer", userID)
	ret0, _ := ret[0].(*model.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayer indicates an expected call of GetPlayer
func (mr *MockGameUsecaseMockRecorder) GetPlayer(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayer", reflect.TypeOf((*MockGameUsecase)(nil).GetPlayer), userID)
}

// GetPlayers mocks base method
func (m *MockGameUsecase) GetPlayers(userID int) ([]*model.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayers", userID)
	ret0, _ := ret[0].([]*model.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayers indicates an expected call of GetPlayers
func (mr *MockGameUsecaseMockRecorder) GetPlayers(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayers", reflect.TypeOf((*MockGameUsecase)(nil).GetPlayers), userID)
}

// GetFood mocks base method
func (m *MockGameUsecase) GetFood(userID int) ([]model.Food, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFood", userID)
	ret0, _ := ret[0].([]model.Food)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFood indicates an expected call of GetFood
func (mr *MockGameUsecaseMockRecorder) GetFood(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFood", reflect.TypeOf((*MockGameUsecase)(nil).GetFood), userID)
}

// ListenEvents mocks base method
func (m *MockGameUsecase) ListenEvents(userID int) (<-chan map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenEvents", userID)
	ret0, _ := ret[0].(<-chan map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListenEvents indicates an expected call of ListenEvents
func (mr *MockGameUsecaseMockRecorder) ListenEvents(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenEvents", reflect.TypeOf((*MockGameUsecase)(nil).ListenEvents), userID)
}

// StopListenEvents mocks base method
func (m *MockGameUsecase) StopListenEvents(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopListenEvents", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopListenEvents indicates an expected call of StopListenEvents
func (mr *MockGameUsecaseMockRecorder) StopListenEvents(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopListenEvents", reflect.TypeOf((*MockGameUsecase)(nil).StopListenEvents), userID)
}
