// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package access is a generated GoMock package.
package access

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCsrfUsecase is a mock of CsrfUsecase interface
type MockCsrfUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCsrfUsecaseMockRecorder
}

// MockCsrfUsecaseMockRecorder is the mock recorder for MockCsrfUsecase
type MockCsrfUsecaseMockRecorder struct {
	mock *MockCsrfUsecase
}

// NewMockCsrfUsecase creates a new mock instance
func NewMockCsrfUsecase(ctrl *gomock.Controller) *MockCsrfUsecase {
	mock := &MockCsrfUsecase{ctrl: ctrl}
	mock.recorder = &MockCsrfUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCsrfUsecase) EXPECT() *MockCsrfUsecaseMockRecorder {
	return m.recorder
}

// CreateTokenBySession mocks base method
func (m *MockCsrfUsecase) CreateTokenBySession(sessionID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTokenBySession", sessionID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTokenBySession indicates an expected call of CreateTokenBySession
func (mr *MockCsrfUsecaseMockRecorder) CreateTokenBySession(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTokenBySession", reflect.TypeOf((*MockCsrfUsecase)(nil).CreateTokenBySession), sessionID)
}

// CheckTokenBySession mocks base method
func (m *MockCsrfUsecase) CheckTokenBySession(token, sessionID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTokenBySession", token, sessionID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTokenBySession indicates an expected call of CheckTokenBySession
func (mr *MockCsrfUsecaseMockRecorder) CheckTokenBySession(token, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTokenBySession", reflect.TypeOf((*MockCsrfUsecase)(nil).CheckTokenBySession), token, sessionID)
}
