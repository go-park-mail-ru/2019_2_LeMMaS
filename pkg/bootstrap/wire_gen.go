// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package bootstrap

import (
	http3 "github.com/go-park-mail-ru/2019_2_LeMMaS/pkg/component/access/delivery/http"
	"github.com/go-park-mail-ru/2019_2_LeMMaS/pkg/component/access/usecase"
	"github.com/go-park-mail-ru/2019_2_LeMMaS/pkg/component/game/delivery/ws"
	usecase2 "github.com/go-park-mail-ru/2019_2_LeMMaS/pkg/component/game/usecase"
	"github.com/go-park-mail-ru/2019_2_LeMMaS/pkg/component/prometheus/delivery/http"
	http4 "github.com/go-park-mail-ru/2019_2_LeMMaS/pkg/component/user/delivery/http"
	"github.com/go-park-mail-ru/2019_2_LeMMaS/pkg/component/user/repository"
	usecase3 "github.com/go-park-mail-ru/2019_2_LeMMaS/pkg/component/user/usecase"
	http2 "github.com/go-park-mail-ru/2019_2_LeMMaS/pkg/delivery/http"
	"github.com/go-park-mail-ru/2019_2_LeMMaS/pkg/logger"
	"github.com/gomodule/redigo/redis"
	"github.com/jmoiron/sqlx"
	"github.com/labstack/echo"
	"os"
)

// Injectors from wire.go:

func NewPrometheusHandler() (*http.PrometheusHandler, error) {
	echo := NewEcho()
	logger, err := NewLogger()
	if err != nil {
		return nil, err
	}
	prometheusHandler := http.NewPrometheusHandler(echo, logger)
	return prometheusHandler, nil
}

func NewMiddleware() (http2.CommonMiddlewaresHandler, error) {
	echo := NewEcho()
	logger, err := NewLogger()
	if err != nil {
		return http2.CommonMiddlewaresHandler{}, err
	}
	commonMiddlewaresHandler := http2.NewCommonMiddlewaresHandler(echo, logger)
	return commonMiddlewaresHandler, nil
}

func NewAccessHandler() (*http3.AccessHandler, error) {
	echo := NewEcho()
	csrfUsecase := usecase.NewCSRFUsecase()
	logger, err := NewLogger()
	if err != nil {
		return nil, err
	}
	accessHandler := http3.NewAccessHandler(echo, csrfUsecase, logger)
	return accessHandler, nil
}

func NewGameHandler() (*ws.GameHandler, error) {
	echo := NewEcho()
	logger, err := NewLogger()
	if err != nil {
		return nil, err
	}
	gameUsecase := usecase2.NewGameUsecase(logger)
	db, err := NewDB()
	if err != nil {
		return nil, err
	}
	userRepository := repository.NewDatabaseRepository(db, logger)
	fileRepository := repository.NewS3Repository(logger)
	conn, err := NewRedis()
	if err != nil {
		return nil, err
	}
	sessionRepository := repository.NewSessionRepository(conn, logger)
	userUsecase := usecase3.NewUserUsecase(userRepository, fileRepository, sessionRepository)
	gameHandler := ws.NewGameHandler(echo, gameUsecase, userUsecase, logger)
	return gameHandler, nil
}

func NewUserHandler() (*http4.UserHandler, error) {
	echo := NewEcho()
	db, err := NewDB()
	if err != nil {
		return nil, err
	}
	logger, err := NewLogger()
	if err != nil {
		return nil, err
	}
	userRepository := repository.NewDatabaseRepository(db, logger)
	fileRepository := repository.NewS3Repository(logger)
	conn, err := NewRedis()
	if err != nil {
		return nil, err
	}
	sessionRepository := repository.NewSessionRepository(conn, logger)
	userUsecase := usecase3.NewUserUsecase(userRepository, fileRepository, sessionRepository)
	userHandler := http4.NewUserHandler(echo, userUsecase, logger)
	return userHandler, nil
}

// wire.go:

var echoInstance *echo.Echo = nil

func NewEcho() *echo.Echo {
	if echoInstance == nil {
		echoInstance = echo.New()
	}
	return echoInstance
}

func NewDB() (*sqlx.DB, error) {
	db, err := sqlx.Connect("pgx", os.Getenv("POSTGRES_DSN"))
	if err != nil {
		return nil, err
	}
	err = db.Ping()
	if err != nil {
		return nil, err
	}
	return db, nil
}

func NewRedis() (redis.Conn, error) {
	connection, err := redis.DialURL(os.Getenv("REDIS_DSN"))
	if err != nil {
		return nil, err
	}
	_, err = connection.Do("PING")
	if err != nil {
		return nil, err
	}
	return connection, nil
}

var loggerInstance *logger.Logger = nil

func NewLogger() (logger.Logger, error) {
	if loggerInstance == nil {
		echoLogger := logger.NewEchoLogger(NewEcho())
		sentryLogger, err := logger.NewSentryLogger()
		if err != nil {
			return nil, err
		}
		combinedLogger := logger.NewCombinedLogger(echoLogger, sentryLogger)
		loggerInstance = &combinedLogger
	}
	return *loggerInstance, nil
}
