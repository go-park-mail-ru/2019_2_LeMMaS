// Code generated by MockGen. DO NOT EDIT.
// Source: user/repository.go

// Package user is a generated GoMock package.
package user

import (
	model "github.com/go-park-mail-ru/2019_2_LeMMaS/model"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockUserRepository is a mock of Repository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUserRepository) Create(email, passwordHash, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", email, passwordHash, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockUserRepositoryMockRecorder) Create(email, passwordHash, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), email, passwordHash, name)
}

// Update mocks base method
func (m *MockUserRepository) Update(user model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUserRepositoryMockRecorder) Update(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), user)
}

// UpdateAvatarPath mocks base method
func (m *MockUserRepository) UpdateAvatarPath(id int, avatarPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvatarPath", id, avatarPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAvatarPath indicates an expected call of UpdateAvatarPath
func (mr *MockUserRepositoryMockRecorder) UpdateAvatarPath(id, avatarPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvatarPath", reflect.TypeOf((*MockUserRepository)(nil).UpdateAvatarPath), id, avatarPath)
}

// GetAll mocks base method
func (m *MockUserRepository) GetAll() ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockUserRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserRepository)(nil).GetAll))
}

// GetByID mocks base method
func (m *MockUserRepository) GetByID(id int) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockUserRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserRepository)(nil).GetByID), id)
}

// GetByEmail mocks base method
func (m *MockUserRepository) GetByEmail(email string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail
func (mr *MockUserRepositoryMockRecorder) GetByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetByEmail), email)
}

// MockUserFileRepository is a mock of FileRepository interface
type MockUserFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserFileRepositoryMockRecorder
}

// MockUserFileRepositoryMockRecorder is the mock recorder for MockUserFileRepository
type MockUserFileRepositoryMockRecorder struct {
	mock *MockUserFileRepository
}

// NewMockUserFileRepository creates a new mock instance
func NewMockUserFileRepository(ctrl *gomock.Controller) *MockUserFileRepository {
	mock := &MockUserFileRepository{ctrl: ctrl}
	mock.recorder = &MockUserFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserFileRepository) EXPECT() *MockUserFileRepositoryMockRecorder {
	return m.recorder
}

// StoreAvatar mocks base method
func (m *MockUserFileRepository) StoreAvatar(user *model.User, avatarFile io.Reader, avatarPath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreAvatar", user, avatarFile, avatarPath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreAvatar indicates an expected call of StoreAvatar
func (mr *MockUserFileRepositoryMockRecorder) StoreAvatar(user, avatarFile, avatarPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAvatar", reflect.TypeOf((*MockUserFileRepository)(nil).StoreAvatar), user, avatarFile, avatarPath)
}
